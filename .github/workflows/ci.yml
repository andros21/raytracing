---
name: CI

"on":
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  pre_ci:
    name: pre ci
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      repo: ${{ steps.repo.outputs.repo }}
    steps:
      - name: get repo name
        id: repo
        run: |
          REPO_NAME=${GITHUB_REPOSITORY#$GITHUB_REPOSITORY_OWNER/}
          echo "Repo: ${REPO_NAME}"
          echo "repo=${REPO_NAME}" >> $GITHUB_OUTPUT
  changes:
    name: filter changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      bash: ${{ steps.filter.outputs.bash }}
      markdown: ${{ steps.filter.outputs.markdown }}
      python: ${{ steps.filter.outputs.python }}
      rust: ${{ steps.filter.outputs.rust }}
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50
        id: filter
        with:
          filters: |
            bash:
              - '**/*.sh'
            markdown:
              - 'src/cli.rs'
              - 'Cargo.lock'
              - 'Cargo.toml'
              - 'TEMPLATE.md'
            python:
              - '**/*.py'
              - '.github/workflows/requirements.txt'
            rust:
              - '**/*.rs'
              - 'Cargo.lock'
              - 'Cargo.toml'
  lint_rs:
    name: lint rust ci
    needs: changes
    if: ${{ needs.changes.outputs.rust == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: check cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: cache
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
            target/
          key: ${{ runner.os }}-rust-all-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}
      - name: install rust toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@1ce4a7352a1efe5dede2e52c75512b34256e4f44
        with:
          toolchain: stable
          components: clippy, llvm-tools-preview, rustfmt, rust-docs
      - name: cargo fmt check
        run: |
          cargo fmt -- --check --verbose
      - name: cargo clippy main
        run: |
          cargo clippy --locked --workspace
      - name: cargo clippy tests
        run: |
          cargo clippy --locked --tests
      - name: cargo rustdoc
        run: |
          cargo rustdoc
  lint_py:
    name: lint python ci
    needs: changes
    if: ${{ needs.changes.outputs.python == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: setup python
        run: |
          python3 -m pip install --user -r .github/workflows/requirements.txt
      - name: black/flake python
        run: |
          md=".github/workflows/md.py"
          ~/.local/bin/black "$md"
          ~/.local/bin/flake8 --max-line-length 90 "$md"
  lint_sh:
    name: lint bash ci
    needs: changes
    if: ${{ needs.changes.outputs.bash == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: shellcheck bash
        run: |
          shopt -s globstar
          shellcheck -s bash **/*.sh .github/**/*.sh
  test:
    name: test ci
    needs: lint_rs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: check cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: cache
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
            target/
          key: ${{ runner.os }}-rust-all-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}
      - name: install rust toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@1ce4a7352a1efe5dede2e52c75512b34256e4f44
        with:
          toolchain: stable
          components: clippy, llvm-tools-preview, rustfmt, rust-docs
      - name: install cargo-llvm-cov
        uses: taiki-e/install-action@b5a6a481a3dffdf81e2a548943b9c02cc29f8143
        with:
          tool: cargo-llvm-cov
      - name: cargo build
        run: |
          cargo build --locked
      - name: cargo test coverage (json)
        if: ${{ (github.event_name == 'push') && !(startsWith(github.event.head_commit.message, 'build(deps):')) }}
        run: |
          cargo llvm-cov --locked --tests --json --summary-only --output-path coverage.json
      - name: report (total lines) coverage
        if: ${{ (github.event_name == 'push') && !(startsWith(github.event.head_commit.message, 'build(deps):')) }}
        id: coverage
        run: |
          COVERAGE=$(cat coverage.json \
             | jq -r ".data[0] | .totals | .lines | .percent" \
             | awk '{print int($0)}')
          echo "##[set-output name=coverage;]${COVERAGE}"
      - name: cargo test coverage (lcov)
        if: ${{ (github.event_name == 'pull_request') && (github.actor != 'dependabot[bot]') }}
        run: |
          cargo llvm-cov --locked --tests --lcov --output-path coverage.lcov.info
      - name: lcov pr report
        if: ${{ (github.event_name == 'pull_request') && (github.actor != 'dependabot[bot]') }}
        uses: romeovs/lcov-reporter-action@dda1c9b1fa1622b225e9acd87a248751dbcc6ada
        with:
          title: Coverage Report
          filter-changed-files: true
          lcov-file: coverage.lcov.info
  badge:
    name: coverage badge
    needs:
      - pre_ci
      - test
    if: ${{ (github.event_name == 'push') && !(startsWith(github.event.head_commit.message, 'build(deps):')) }}
    runs-on: ubuntu-latest
    permissions: {}
    env:
      gist_id: 0e20cd331d0800e3299298a3868aab7a
    steps:
      - name: generate dynamic badge
        uses: schneegans/dynamic-badges-action@5d424ad4060f866e4d1dab8f8da0456e6b1c4f56
        with:
          auth: ${{ secrets.GIST_TOKEN }}
          filename: ${{ needs.pre_ci.outputs.repo }}__${{ github.ref_name }}.json
          gistID: ${{ env.gist_id }}
          label: coverage
          message: ${{ needs.test.outputs.coverage }}%
          namedLogo: github
          style: flat-square
          valColorRange: ${{ needs.test.outputs.coverage }}
          maxColorRange: 100
          minColorRange: 0
      - name: badge image url
        run: |
          URL="https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.actor }}/${{ env.gist_id }}/raw/${{ needs.pre_ci.outputs.repo }}__${{ github.ref_name }}.json"
          MARKDOWN="![Coverage](${URL})"
          echo "Badge URL: ${URL}"
          echo "Badge image for Markdown: ${MARKDOWN}"
  md:
    name: update readme
    needs: changes
    if: ${{ (github.event_name == 'push') && !(startsWith(github.event.head_commit.message, 'build(deps):')) && (needs.changes.outputs.markdown == 'true') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout project
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
      - name: check cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7
        id: cache
        with:
          path: |
            ~/.cargo/
            ~/.rustup/
            target/
          key: ${{ runner.os }}-rust-all-${{ hashFiles('Cargo.toml') }}-${{ hashFiles('Cargo.lock') }}
      - name: install rust toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: dtolnay/rust-toolchain@1ce4a7352a1efe5dede2e52c75512b34256e4f44
        with:
          toolchain: stable
          components: clippy, llvm-tools-preview, rustfmt, rust-docs
      - name: cargo build
        run: |
          cargo build --locked
      - name: update readme
        run: .github/workflows/md.py
      - name: commit readme
        uses: EndBug/add-and-commit@61a88be553afe4206585b31aa72387c64295d08b
        with:
          message: 'build(README): render from TEMPLATE'
          add: 'README.md'
