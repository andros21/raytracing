var searchIndex = JSON.parse('{\
"rustracer":{"doc":"Prerequisites","t":[0,14,0,0,5,5,5,0,14,0,0,5,0,0,0,14,14,0,0,0,0,5,0,0,0,0,0,4,8,13,3,13,3,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,12,12,17,17,17,3,17,17,17,17,17,17,17,17,12,12,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,17,3,17,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,4,4,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,17,13,3,4,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,5,5,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,5,11,11,11,12,3,3,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,4,13,3,13,3,8,8,13,3,3,4,8,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,4,17,8,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,12,12,17,17,17,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,3,11,11,11,11,11,11,12,11,11,12,11,11,11,11,11,11,12,12,12,11,11,11,11,13,3,13,3,13,3,3,13,4,8,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,13,13,17,13,3,13,13,3,13,13,13,13,13,4,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,3,3,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,5,5,12,10,11,11,5,5,12,12,11,12,12,11,11,11,11,11,11,11,11,11,12,17,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,11,11,11,11,11,5,5,5,5,11,11,5,11,11,11,11,11,11,17,17,17,3,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11],"n":["camera","check","cli","color","completion","convert","demo","error","exit","hdrimage","imagetracer","main","material","misc","normal","not_match","not_matches","point","random","ray","render","render","scene","shape","transformation","vector","world","Camera","FireRay","Orthogonal","OrthogonalCamera","Perspective","PerspectiveCamera","aspect_ratio","aspect_ratio","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","distance","drop","drop","drop","eq","eq","fire_ray","fire_ray","fire_ray","fire_ray","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","new","new","to_owned","to_owned","tranformation","transformation","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","ALGORITHM","ANGLE_DEG","ANTI_ALIASING","Cli","FACTOR","GAMMA","HEIGHT","INIT_SEQ","INIT_STATE","MAX_DEPTH","NUM_OF_RAYS","WIDTH","angle_deg","aspect_ratio","borrow","borrow_mut","build_cli","clone","clone_into","deref","deref_mut","drop","from","init","into","to_owned","try_from","try_into","type_id","BLACK","Color","WHITE","add","b","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","from","from","g","init","into","into_iter","is_close","luminosity","mul","mul","r","to_owned","try_from","try_into","type_id","CompletionErr","ConvertErr","DemoErr","FloatParseFailure","FloatParseFailure","FloatParseFailure","FloatParseFailure","HdrImageErr","IntParseFailure","IntParseFailure","InvalidCamera","InvalidCharacter","InvalidPfmFileFormat","InvalidPixelsSize","IoError","IoError","IoError","LdrFileWriteFailure","NotMatch","OutOfBounds","PfmFileReadFailure","PfmFileReadFailure","PfmFileWriteFailure","PfmFloatParseFailure","PfmIntParseFailure","RenderErr","SceneErr","SceneError","SceneFileReadFailure","UnclosedString","UndefinedIdentifier","UnexpectedMatch","UnsupportedLdrFileFormat","WriteCompletionFailure","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","provide","provide","provide","provide","provide","provide","source","source","source","source","source","source","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","1","0","0","1","0","0","0","1","1","0","0","0","0","0","0","0","0","0","1","1","1","1","0","0","0","0","1","1","1","0","0","loc","loc","loc","loc","loc","loc","loc","msg","msg","msg","msg","msg","msg","msg","src","src","AverageLuminosity","DELTA","FloatValue","HdrImage","Luminosity","average_luminosity","borrow","borrow","borrow_mut","borrow_mut","check_eol","clamp","clamp_image","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","get_pixel","height","init","init","into","into","new","normalize_image","parse_endianness","parse_img_shape","pixel_offset","pixels","read_pfm_file","read_pfm_image","set_pixel","set_pixels","shape","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","valid_coordinates","width","write_float","write_ldr_file","write_pfm_file","write_pfm_image","0","ImageTracer","Rays","all_rays","borrow","borrow","borrow_mut","borrow_mut","camera","deref","deref","deref_mut","deref_mut","drop","drop","fire_all_rays","fire_ray","from","from","image","init","init","into","into","new","rays","seq","try_from","try_from","try_into","try_into","type_id","type_id","BRDF","Checkered","CheckeredPigment","Diffuse","DiffuseBRDF","Eval","GetColor","Image","ImagePigment","Material","Pigment","ScatterRay","Specular","SpecularBRDF","Uniform","UniformPigment","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","brdf","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","color","color1","color2","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","emitted_radiance","eval","eval","eval","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_color","get_color","get_color","get_color","get_color","get_color","get_color","get_color","hdr_img","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","new","pigment","pigment","scatter_ray","scatter_ray","scatter_ray","scatter_ray","steps","threshold_angle_rad","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","BigEndian","ByteOrder","EPSILON","IsClose","LittleEndian","Vector2D","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","deref","deref","deref_mut","deref_mut","drop","drop","eq","fmt","from","from","init","init","into","into","is_close","is_close","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u","v","E1","E2","E3","Normal","borrow","borrow_mut","clone","clone_into","create_onb_from_z","deref","deref_mut","dot","drop","eq","fmt","fmt","from","from","init","into","is_close","mul","mul","mul","neg","norm","normalize","squared_norm","to_owned","to_string","try_from","try_into","type_id","x","y","z","Point","add","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","eq","fmt","fmt","from","from","init","into","is_close","mul","sub","sub","to_owned","to_string","try_from","try_into","type_id","x","y","z","Pcg","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","fmt","from","inc","init","into","new","random","random_float","state","to_owned","try_from","try_into","type_id","Ray","at","borrow","borrow_mut","clone","clone_into","default","depth","deref","deref_mut","dir","drop","fmt","from","init","into","is_close","origin","tmax","tmin","to_owned","try_from","try_into","type_id","Dummy","DummyRenderer","Flat","FlatRenderer","OnOff","OnOffRenderer","PathTracer","PathTracer","Renderer","Solve","bg_color","bg_color","bg_color","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fg_color","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","max_depth","new","new","new","num_of_rays","russian_roulette_limit","solve","solve","solve","solve","solve","solve","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","world","world","world","0","0","0","0","Camera","Checkered","Color","Colors","Compose","Diffuse","Distance","Identifier","Image","InputStream","Keyword","Keywords","LiteralNumber","Material","Materials","Name","Plane","Ratio","RotationX","RotationY","RotationZ","SYMBOLS","Scaling","Scene","Shape","Shapes","SourceLocation","Specular","Sphere","Stop","String","Symbol","Token","Transformation","Transformations","Translation","Type","Uniform","Var","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","camera","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","col_num","colors","count_spaces","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","init","init","init","init","init","init","into","into","into","into","into","into","line_num","location","match_eol_or_inline_comment","match_identifier","match_keyword","match_keywords","match_number","match_number_cli","match_spaces","match_string","match_symbol","match_whitespaces_and_comments","materials","new","parse_brdf","parse_camera","parse_color","parse_color_name","parse_colors","parse_composed_transformation","parse_float","parse_keyword_or_identifier","parse_material","parse_materials","parse_pigment","parse_scene","parse_shape","parse_shapes","parse_string","parse_transformation","parse_transformations","parse_vector","read_char","read_scene_file","read_token","reader","saved_ch","saved_location","saved_token","shapes","skip_comment","skip_whitespaces_and_comments","spaces","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","transformations","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unread_char","unread_token","update_pos","vectors","0","0","0","0","0","0","1","1","1","1","1","HitRecord","Plane","RayIntersection","Sphere","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","is_close","material","material","material","new","new","normal","plane_normal","plane_point_to_uv","ray","ray_intersection","ray_intersection","ray_intersection","sphere_normal","sphere_point_to_uv","surface_point","t","to_owned","transformation","transformation","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","world_point","IDENTITY_MATRIX","Matrix","Transformation","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","default","deref","deref","deref_mut","deref_mut","drop","drop","elements","eq","eq","fmt","fmt","from","from","index","index_mut","init","init","into","into","inverse","invm","is_close","is_close","is_consistent","m","mul","mul","mul","mul","mul","mul","rotation_x","rotation_y","rotation_z","scaling","to_owned","to_owned","translation","try_from","try_from","try_into","try_into","type_id","type_id","E1","E2","E3","Vector","add","borrow","borrow_mut","clone","clone_into","create_onb_from_z","deref","deref_mut","dot","drop","eq","fmt","fmt","from","from","from","from","init","into","is_close","mul","mul","neg","norm","normalize","squared_norm","sub","to_owned","to_string","try_from","try_into","type_id","x","y","z","World","add","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","from","init","into","ray_intersection","shapes","try_from","try_into","type_id"],"q":["rustracer","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::camera","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::camera::Camera","","rustracer::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::color","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::error::CompletionErr","","rustracer::error::ConvertErr","","","rustracer::error::DemoErr","","","","","rustracer::error::HdrImageErr","","","","","","","","","","","","","rustracer::error::RenderErr","","","","","","","rustracer::error::SceneErr","","","","","","","","","","","","","","","","","","rustracer::hdrimage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::hdrimage::Luminosity","rustracer::imagetracer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::materialrustracer::material::BRDF","","rustracer::material::Pigment","","","rustracer::misc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::normal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::point","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::random","","","","","","","","","","","","","","","","","","","","","","rustracer::ray","","","","","","","","","","","","","","","","","","","","","","","","rustracer::render","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::render::Renderer","","","","rustracer::scenerustracer::scene::Token","","","","","","","","","","","rustracer::shape","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::transformation","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::vector","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rustracer::world","","","","","","","","","","","","","","","",""],"d":["Camera module.","Macro for fail fast in <code>main</code> subcommands (e.g. inside …","Command Line Interface module.","RGB Color module.","Generate shell completions file for <code>rustracer</code> command and …","Convert High Dynamic Range (LDR) image to Low Dynamic …","Render a demo scene (hard-coded inside main).","Error reporting module.","Macro for wrap exit logic inside <code>main</code>.","High Dynamic Range Image module.","Image Tracer module.","Crate main function.","Material module.","Miscellanea module.","3D Normal module.","Support macro when there is a token mismatch.","Support macro to check what type of token mismatch occurs.","3D Point module.","PCG random numbers generator module.","Light Ray module.","Render module.","Render a scene from file.","Scene parsing module.","Geometric Shapes module.","3D Homogeneous Transformation module.","3D Vector module.","World module.","Enum of cameras.","Trait for fire a <code>Ray</code> through a <code>camera</code>.","","A camera implementing an orthogonal 3D -&gt; 2D projection.","","A camera implementing a perspective 3D -&gt; 2D projection.","Aspect Ratio.","Aspect ratio.","","","","","","","","","","","","","","","","","","","Screen distance.","","","","","","","Shoot a <code>Ray</code> through the camera’s screen.","Shoot a <code>Ray</code> through the camera’s screen.","Shoot a <code>Ray</code> through the camera’s screen as the variant …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new orthographic camera.","Create a new perspective camera.","","","<code>Transformation</code> to apply to <code>Ray</code>.","<code>Transformation</code> to apply to <code>Ray</code>.","","","","","","","","","","","","Default rendering algorithm.","Default angle of view (in degrees).","Default anti-aliasing level.","Inherits some useful cli parameters.","Default normalization factor.","Default transfer function parameter.","Default image height.","Default identifier for random generator sequence.","Default init seed for random generator.","Default max depth for pathtracer algorithm.","Default number of rays for pathtracer algorithm.","Default image width.","","","","","Build a <code>clap::Command</code> for <code>rustracer</code> crate.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","Black color.","RGB Color struct.","White color.","","Blue.","","","","","","","","","","","","Returns the argument unchanged.","Green.","","Calls <code>U::from(self)</code>.","","Return <code>true</code> if the three RGB components of two <code>Color</code> are …","Return a rough measure of the luminosity associated with …","","","Red.","","","","","Error enum for <code>completion</code> function inside <code>main</code>.","Error enum for <code>convert</code> function inside <code>main</code>.","Error enum for <code>demo</code> function inside <code>main</code>.","","","","","Error enum for <code>HdrImage</code> module.","","","","","","","","","","","","","","","","","","Error enum for <code>render</code> function inside <code>main</code>.","Error enum for <code>Scene</code> module.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Variant for using <code>average_luminosity</code> inside <code>normalize_image</code>…","","Variant for setting a constant <code>f32</code> value for luminosity …","High Dynamic Range Image struct.","Luminosity enum.","Return the average luminosity of the image.","","","","","Boolean check end of line.","Adjust the color levels of the brightest pixels in the …","Adjust the color levels of the brightest pixels in the …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return the <code>Color</code> value for a pixel in the image inside a …","Number of rows in the 2D matrix of colors.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a black image with the specified resolution.","Normalize the image for a given luminosity.","Parse image endianness from string.","Parse image shape, <code>u32</code> tuple, from string.","Return the position in the 1D array of the specified pixel.","The 2D matrix, represented as a 1D <code>std::vec::Vec</code> of <code>Color</code>.","Read a pfm image from <code>path</code>, wrapper function around …","Read a pfm image from <code>buf_reader</code> with <code>std::io::BufRead</code> …","Set the new <code>Color</code> for a pixel in the image.","Set pixels matrix, from underlying <code>Vec</code> structure, of the …","Get pixels matrix shape <code>(width, heigth)</code>.","","","","","","","","Return <code>true</code> if <code>(x, y)</code> are coordinates within the 2D matrix.","Number of columns in the 2D matrix of colors.","Write <code>f32</code> value to stream. ","Save the image in a Low Dynamic Range (LDR) format, using …","Write a pfm image to <code>path</code>, wrapper function around …","Write a pfm image to <code>stream</code> with <code>std::io::Write</code> trait …","","Trace an image by shooting light rays through each of its …","Appo struct for <code>all_rays</code> that will store for each pixel in …","Generate a <code>Vec</code> of <code>Rays</code>.","","","","","A <code>Camera</code> enum that implement <code>FireRay</code> trait.","","","","","","","Shoot several light rays crossing each of the pixels in …","Shot one light <code>Ray</code> through image pixel <code>(col, row)</code>.","Returns the argument unchanged.","Returns the argument unchanged.","An initialized <code>HdrImage</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Initialize an ImageTracer object.","Rays for each pixel.","<code>Pcg</code> <code>init_seq</code> for each pixel.","","","","","","","Enum of BRDFs.","","A checkered pigment.","","A class representing an ideal diffuse BRDF (also called “…","A trait for evaluating a particular BRDF on a parametric …","Trait that associates a <code>Color</code> with each point on a …","","A textured pigment.","A material with a particular pigment and BRDF.","Enum of pigments.","A trait for scatter a <code>Ray</code> for a particular BRDF.","","A class representing an ideal mirror BRDF.","","A uniform pigment.","","","","","","","","","","","","","","","","","A BRDF that implement both <code>Eval</code> and <code>ScatterRay</code> traits.","","","","","","","","","","","","","","","","","A <code>Color</code>.","First <code>Color</code>.","Second <code>Color</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A pigment that implement <code>GetColor</code> trait.","","","","Eval a particular <code>BRDF</code> variant.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Return a different <code>Color</code> as function of <code>Pigment</code> variant.","","","Return a different Color as function of Pigment variant.","An <code>HdrImage</code> reference.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ImagePigment</code> from <code>HdrImage</code>.","A generic pigment that implement <code>GetColor</code>.","A generic pigment that implement <code>GetColor</code> trait.","","Random scattering on semi-sphere using two <code>f32</code> that will …","Perfect mirror behaviour.","Scatter a <code>Ray</code> as a particular <code>BRDF</code> variant.","Number of steps.","A threshold angle in radians.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Variants of byte/bit endianness.","Default error tolerance used inside <code>IsClose</code> trait.","Trait for equivalence between two objects, up to a certain …","","2D point struct used for shape’s surface parametrization","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return <code>true</code> if the three xyz components of two <code>Vector2D</code> …","","","","","","","","","","X-axis normal.","Y-axis normal.","Z-axis normal.","3D Normal struct.","","","","","Create a orthonormal basis (ONB) from a <code>Normal</code> …","","","Compute the dot product between two normals.","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return <code>true</code> if the three xyz components of two <code>Normal</code> are …","","","","Return the reversed normal.","Return the norm (Euclidean length) of a normal.","Modify the normal’s norm so that it becomes equal to 1.","Return the squared norm (Euclidean length) of a normal.","","","","","","x component.","y component.","z component.","3D Point struct.","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Return <code>true</code> if the three xyz components of two <code>Point</code> are …","","","","","","","","","x component.","y component.","z component.","PCG random numbers generator.","","","","","Provides a default constructor for <code>Pcg</code>, the default values …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Provides a constructor for <code>Pcg</code>.","Generates an integer random number.","Generates a float random number.","","","","","","Light Ray struct.","Return the position of the <code>Ray</code> at time <code>t</code>. The time is …","","","","","Return as default ray a <code>Ray</code> with:","Counts the number of reflection occurred. If a ray is …","","","<code>Vector</code> propagation direction.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Return <code>true</code> if all the members of two <code>Ray</code> are close","Origin <code>Point</code> of the light ray.","Maximum time of propagation.","Minimum time of propagation.","","","","","","A dummy renderer.","","A flat renderer.","","A on/off renderer.","A path tracing renderer.","","Enum of renderers.","A trait for solving rendering equation.","Background color (usually <code>BLACK</code>).","Background color (usually <code>BLACK</code>).","Background color (usually <code>BLACK</code>).","","","","","","","","","","","","","","","","","","","","","","","","","","Foreground color (usually <code>WHITE</code>).","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Maximum depth of scattered rays, this should always be …","Create a new <code>OnOffRenderer</code> renderer.","Create a new <code>FlatRenderer</code> renderer.","Create a new <code>PathTracer</code> renderer.","Number of scattered rays after every impact.","After this level of depth the russian roulette algorithm …","","Solve rendering with on/off strategy.","Solve rendering with flat colors.","Solve the rendering equation using a path tracing …","Solve nothing! Only return a fixed <code>Color</code>.","Render the scene using a particular <code>Renderer</code> variants.","","","","","","","","","","","","","","","","A world instance.","A world instance.","A world instance.","","","","","","","","","","","","","","A high-level wrapper around a stream, used to parse scene …","","Enum for all the possible keywords of <code>Token::Keyword</code>.","","","","","","","","","","Chars that must be considered special when parsed.","","Scene to render.","","","A specific position in a scene file.","","","","","","Enum for all tokens recognized by the lexer.","","","","","","Variables object, useful to store when parsing.","","","","","","","","","","","","","","","","","","","","","","","","Number of the column.","Map of colors.","Count spaces that build up a particular indent block. See …","Initialize a variables object with some useful predefined …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Number of the line.","A location pointer.","Match an eof-of-inline or an inline comment, othewise …","Read a token from stream and check that it matches …","Read a token from stream and check that it matches …","Read a token from stream and check that it matches …","Read a token from stream and check that it matches …","Read a token from stream and check that it matches …","Match the correct number of spaces for the current indent …","Read a token from stream and check that it matches …","Read a token from stream and check that it matches …","Match whitespaces or an comments, othewise return …","Map of materials.","Create a new <code>InputStream</code> from a stream that implement <code>Read</code> …","Parse a <code>brdf</code> <code>BRDF</code> from stream combining previous match …","Parse camera inside camera block using <code>var.materials</code> and …","Parse a rgb color <code>Color</code> from stream combining previous …","Parse a color from colors block combining <code>parse_color</code> and …","Parse colors inside colors block iterating <code>parse_color_name</code>","Compose multiple <code>transformation</code> <code>Transformation</code> into one …","Parse literal number (always as <code>f32</code>) token …","Parse a keyword token <code>Token::Keyword</code> or an identifier …","Parse a <code>material</code> <code>Material</code> inside materials block combining …","Parse materials inside materials block iterating …","Parse a <code>pigment</code> <code>Pigment</code> from stream combining previous …","Parse a scene in all its entirety.","Parse shape inside shapes block using <code>var.materials</code> and …","Parse shapes inside shapes block iterating <code>parse_shape</code> …","Parse string token <code>Token::String</code>.","Parse a <code>transformation</code> <code>Transformation</code> from stream …","Parse transformations inside transformations block …","Parse an xyz vector <code>Vector</code> from stream combining previous …","Read a new character from the stream.","Build up scene from a scene file (<strong>yaml</strong> formatted).","Read a <code>Token</code> from the stream.","A stream that implement <code>Read</code> trait.","Last saved char.","Last saved location.","Last saved token.","","If a comment character (for <strong>yaml</strong> is <code>#</code>) is found, skip all …","Keep reading characters until a non-whitespace/non-comment …","Spaces that build up an indent block.","","","","","","","Map of transformations.","","","","","","","","","","","","","","","","","","","Push a character back to the stream.","Make as if <code>token</code> were never read from stream.","Update location after having read char from the stream.","Map of vectors.","","","","","","","","","","","","Struct used to store the results of <code>RayIntersection</code>.","Geometrical shape corresponding to a plane.","Trait to determine the intersections of an object with a …","Geometrical shape corresponding to a sphere.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return <code>true</code> if all the members of two <code>HitRecord</code> are close.","The <code>Material</code> of the impacted shape","The <code>Material</code> of the sphere.","The <code>Material</code> of the sphere.","Provides a constructor for <code>Sphere</code>.","Provides a constructor for <code>Plane</code>.","Normal of the shape surface on the impact point.","Calculates normals to <code>Plane</code>’s surface.","Returns parametrization coordinates of a point on a plane.","The ray that impacted on the shape.","","Finds intersections between a <code>Ray</code> and a <code>Sphere</code>.","Finds intersections between a <code>Ray</code> and a <code>Plane</code>.","Calculates normals to <code>Sphere</code>’s surface.","Returns parametrization coordinates of a point on a sphere.","Coordinates of the point of impact in the frame of …","Time the ray travelled before the impact.","","A generic sphere is defined by means of a <code>Transformation</code> …","A generic plane is defined by means of a <code>Transformation</code> on …","","","","","","","","","","Coordinates of the point of impact.","4D Identity matrix.","4D Matrix struct.","3D Homogeneous Transformation struct.","","","","","","","","","Return as default matrix a <code>Matrix</code> with elements equal to …","","","","","","","","Matrix elements.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a <code>Transformation</code> object representing the inverse …","Inverse transformation matrix.","Return <code>true</code> if all elements of two <code>Matrix</code> are close.","Return <code>true</code> if matrix and inverse matrix of two …","Check the internal consistency of the transformation.","Transformation matrix.","","","","","","","Return a <code>Transformation</code> object encoding a rotation around …","Return a <code>Transformation</code> object encoding a rotation around …","Return a <code>Transformation</code> object encoding a rotation around …","Return a <code>Transformation</code> object encoding a scaling.","","","Return a <code>Transformation</code> object encoding a rigid …","","","","","","","X-axis vector.","Y-axis vector.","Z-axis vector.","3D Vector struct.","","","","","","Create a orthonormal basis (ONB) from a <code>Vector</code> …","","","Compute the dot product between two vectors.","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Return <code>true</code> if the three xyz components of two <code>Vector</code> are …","","","Return the reversed vector.","Return the norm (Euclidean length) of a vector.","Modify the vector’s norm so that it becomes equal to 1.","Return the squared norm (Euclidean length) of a vector.","","","","","","","x component","y component","z component","A class holding a list of <code>shapes</code> (e.g. <code>Plane</code>, <code>Sphere</code>).","Append a new boxed shape to this <code>World</code>.","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Determine whether a ray intersects any of the objects in …","A <code>std::vec::Vec</code> of <code>std::boxed::Box</code>-ed <code>shapes</code> that …","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,13,0,7,8,7,8,13,7,8,13,7,8,7,8,7,8,7,8,13,7,8,13,8,7,8,13,7,8,73,7,8,13,7,8,13,7,8,13,7,8,13,7,8,13,7,8,7,8,7,8,7,8,13,7,8,13,7,8,13,74,75,0,0,0,0,0,0,0,0,0,0,0,0,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,0,0,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,4,5,22,6,0,5,6,22,22,21,21,4,5,6,21,22,21,21,22,21,21,21,0,0,6,22,22,22,22,21,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,21,4,4,5,5,22,22,6,6,2,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,21,4,5,22,6,2,76,76,77,78,77,79,80,81,79,80,82,83,84,85,86,87,88,89,90,82,83,87,88,91,92,93,94,91,92,94,95,96,97,98,99,100,101,102,103,97,98,99,100,101,102,103,99,101,29,0,29,0,0,27,29,27,29,27,0,0,27,27,27,29,27,29,27,29,27,27,27,29,27,27,27,29,27,29,27,27,27,0,0,27,27,27,27,27,27,27,27,29,27,29,27,29,27,27,27,0,27,27,27,104,0,0,35,35,37,35,37,35,35,37,35,37,35,37,35,35,35,37,35,35,37,35,37,35,37,37,35,37,35,37,35,37,0,42,0,45,0,0,0,42,0,0,0,0,45,0,42,0,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,46,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,39,41,41,39,43,44,46,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,46,105,43,44,45,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,106,39,40,41,42,43,44,45,40,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,40,43,44,107,43,44,45,41,44,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,39,40,41,42,43,44,45,46,108,109,110,111,112,31,0,0,0,31,0,31,49,31,49,49,49,49,31,49,31,49,31,49,49,49,31,49,31,49,31,49,113,49,49,31,49,31,49,31,49,49,49,0,0,0,0,47,47,47,47,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,38,0,38,0,38,0,0,38,0,0,53,54,55,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,53,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,55,53,54,55,55,55,114,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,53,54,55,56,38,53,54,55,115,116,117,118,58,58,58,58,58,58,58,59,58,0,59,0,59,58,58,58,58,58,58,58,58,0,58,0,58,58,0,58,58,59,59,59,0,58,58,58,58,58,0,57,58,59,62,63,64,57,58,59,62,63,64,64,57,58,59,62,63,57,58,59,62,63,57,63,62,63,64,57,58,59,62,63,64,57,58,59,62,63,64,57,58,59,62,63,64,58,57,58,58,59,64,57,58,59,62,63,64,57,58,59,62,63,64,57,58,59,62,63,64,57,62,62,62,62,62,62,62,62,62,62,62,63,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,64,62,62,62,62,62,64,62,62,62,57,58,59,62,63,58,63,57,58,59,62,63,64,57,58,59,62,63,64,57,58,59,62,63,64,62,62,62,63,119,120,121,122,123,124,119,120,121,123,124,0,0,0,0,69,70,71,69,70,71,69,69,70,71,69,70,71,69,70,71,69,70,71,70,71,69,70,71,69,70,71,69,70,71,69,69,70,71,70,71,69,0,0,69,67,70,71,0,0,69,69,69,70,71,69,70,71,69,70,71,69,70,71,69,0,0,0,72,16,72,16,72,16,72,16,72,16,72,16,72,16,72,16,72,72,16,72,16,72,16,72,72,72,16,72,16,16,16,72,16,16,16,72,16,16,16,16,16,0,0,0,0,72,16,0,72,16,72,16,72,16,0,0,0,0,48,48,48,48,48,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52],"f":[0,0,0,0,[1,[[3,[2]]]],[1,[[3,[4]]]],[1,[[3,[5]]]],0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,[1,[[3,[6]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[[]],[[]],[[],7],[[],8],[9],[9],[9],[9],[9],[9],0,[9],[9],[9],[[7,7],10],[[8,8],10],[[11,11],12],[[7,11,11],12],[[8,11,11],12],[[13,11,11],12],[[7,14],15],[[8,14],15],[[13,14],15],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[11,16],7],[[11,11,16],8],[[]],[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],18],[19,19],[[]],[9],[9],[9],[[]],[[],9],[[]],[[]],[[],3],[[],3],[[],17],0,0,0,[[20,20]],0,[[]],[[]],[20,20],[[]],[[],20],[9],[9],[9],[[20,20],10],[[20,14],15],[[],20],[[]],0,[[],9],[[]],[20],[[20,20],10],[20,11],[[20,11]],[[20,20]],0,[[]],[[],3],[[],3],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[21,14],15],[[21,14],15],[[4,14],15],[[4,14],15],[[5,14],15],[[5,14],15],[[22,14],15],[[22,14],15],[[6,14],15],[[6,14],15],[[2,14],15],[[2,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[23],[23],[23],[23],[23],[23],[21,[[25,[24]]]],[4,[[25,[24]]]],[5,[[25,[24]]]],[22,[[25,[24]]]],[6,[[25,[24]]]],[2,[[25,[24]]]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],26],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[27,11],[[]],[[]],[[]],[[]],[10,[[3,[21]]]],[11,11],[27],[27,27],[[]],[9],[9],[9],[9],[9],[9],[[27,27],10],[[27,14],15],[[]],[[]],[[27,28,28],[[3,[20,21]]]],0,[[],9],[[],9],[[]],[[]],[[28,28],27],[[27,11,29]],[30,[[3,[31,21]]]],[30,[[3,[21]]]],[[27,28,28],9],0,[32,[[3,[27,21]]]],[[],[[3,[27,21]]]],[[27,28,28,20],[[3,[21]]]],[[27,[33,[20]]],[[3,[21]]]],[27],[[]],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[27,28,28],10],0,[[11,31],34],[[27,32,11],[[3,[21]]]],[[27,32,31],[[3,[21]]]],[[27,31],[[3,[21]]]],0,0,0,[[35,36,36,28],[[33,[37]]]],[[]],[[]],[[]],[[]],0,[9],[9],[9],[9],[9],[9],[[35,38,36,36,28]],[[35,28,28,11,11],12],[[]],[[]],0,[[],9],[[],9],[[]],[[]],[[27,13],35],0,0,[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[],39],[[],43],[[],44],[[],46],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],0,[[47,48,48,49],20],[[43,47,48,48,49],20],[[44,47,48,48,49],20],[[45,47,48,48,49],20],[[39,14],15],[[40,14],15],[[41,14],15],[[42,14],15],[[43,14],15],[[44,14],15],[[45,14],15],[[46,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,20],[[39,49],20],[[40,49],20],[[41,49],20],[[42,49],20],[[43,49],20],[[44,49],20],[[45,49],20],0,[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,40],0,0,[[48,50,47,28],12],[[43,48,50,47,28],12],[[44,48,50,47,28],12],[[45,48,50,47,28],12],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[49,49],[[]],[[],49],[9],[9],[9],[9],[9],[9],[[49,49],10],[[49,14],15],[[]],[[]],[[],9],[[],9],[[]],[[]],[[],10],[[49,49],10],[[]],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],0,0,0,0,0,0,[[]],[[]],[47,47],[[]],[47],[9],[9],[[47,47],11],[9],[[47,47],10],[[47,14],15],[[47,14],15],[[],47],[[]],[[],9],[[]],[[47,47],10],[[47,48]],[[47,47]],[[47,11]],[47,47],[47,11],[47,47],[47,11],[[]],[[],26],[[],3],[[],3],[[],17],0,0,0,0,[[50,48]],[[]],[[]],[50,50],[[]],[[],50],[9],[9],[9],[[50,50],10],[[50,14],15],[[50,14],15],[[]],[[],50],[[],9],[[]],[[50,50],10],[[50,11]],[[50,50]],[[50,48]],[[]],[[],26],[[],3],[[],3],[[],17],0,0,0,0,[[]],[[]],[51,51],[[]],[[],51],[9],[9],[9],[[51,14],15],[[]],0,[[],9],[[]],[[36,36],51],[51,28],[51,11],0,[[]],[[],3],[[],3],[[],17],0,[[12,11],50],[[]],[[]],[12,12],[[]],[[],12],0,[9],[9],0,[9],[[12,14],15],[[]],[[],9],[[]],[[12,12],10],0,0,0,[[]],[[],3],[[],3],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],0,[[52,20,20],53],[[52,20],54],[[52,20,28,28,28],55],0,0,[[12,51],20],[[53,12,51],20],[[54,12,51],20],[[55,12,51],20],[[56,12,51],20],[[38,12,51],20],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[57,57],[58,58],[59,59],[[[62,[[0,[60,61]]]]],[[62,[[0,[60,61]]]]]],[63,63],[[]],[[]],[[]],[[]],[[]],0,0,[[[62,[61]]],[[3,[22]]]],[[],63],[[],64],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[58,58],10],[[57,14],15],[[58,14],15],[[58,14],15],[[59,14],15],[[64,14],15],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[62,[61]]],[[3,[22]]]],[[[62,[61]]],[[3,[22]]]],[[[62,[61]],58],[[3,[22]]]],[[[62,[61]],33],[[3,[58,22]]]],[[[62,[61]]],[[3,[11,22]]]],[[[62,[61]],19],[[3,[11,22]]]],[[[62,[61]],28,28],[[3,[22]]]],[[[62,[61]]],[[3,[22]]]],[[[62,[61]],65],[[3,[22]]]],[[[62,[61]]],[[3,[22]]]],0,[61,[[62,[61]]]],[[[62,[61]],63],[[3,[45,22]]]],[[[62,[61]],63,19],[[3,[13,22]]]],[[[62,[61]],63],[[3,[20,22]]]],[[[62,[61]],66,63],[[3,[22]]]],[[[62,[61]],63],[[3,[[66,[26,20]],22]]]],[[[62,[61]],66,63],[[3,[22]]]],[[[62,[61]],65,57],[[3,[59,22]]]],[[[62,[61]],65,57],59],[[[62,[61]],66,63],[[3,[22]]]],[[[62,[61]],63],[[3,[[66,[26,46]],22]]]],[[[62,[61]],28,63],[[3,[42,22]]]],[[[62,[61]],19],[[3,[64,22]]]],[[[62,[61]],63],[[3,[[68,[67]],22]]]],[[[62,[61]],63],[[3,[52,22]]]],[[[62,[61]],57,65],[[3,[59,22]]]],[[[62,[61]],66,63],[[3,[16,22]]]],[[[62,[61]],63],[[3,[[66,[26,16]],22]]]],[[[62,[61]],63],[[3,[48,22]]]],[[[62,[61]]],65],[[32,19],[[3,[64,22]]]],[[[62,[61]]],[[3,[59,22]]]],0,0,0,0,0,[[[62,[61]]]],[[[62,[61]]]],0,[[]],[[]],[[]],[[]],[[]],[[],26],0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[62,[61]],65]],[[[62,[61]],59]],[[[62,[61]],65]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[[]],[[],70],[[],71],[9],[9],[9],[9],[9],[9],[9],[9],[9],[[70,14],15],[[71,14],15],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[]],[[]],[[]],[[69,69],10],0,0,0,[[16,46],70],[[16,46],71],0,[48,47],[50,49],0,[12,[[25,[69]]]],[[70,12],[[25,[69]]]],[[71,12],[[25,[69]]]],[[50,48],47],[50,49],0,0,[[]],0,0,[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],[[],17],0,0,0,0,[[]],[[]],[[]],[[]],[72,72],[16,16],[[]],[[]],[[],72],[[],16],[9],[9],[9],[9],[9],[9],0,[[72,72],10],[[16,16],10],[[72,14],15],[[16,14],15],[[]],[[]],[72],[72],[[],9],[[],9],[[]],[[]],[16,16],0,[[72,72],10],[[16,16],10],[16,10],0,[[72,72]],[[16,50]],[[16,47]],[[16,12]],[[16,48]],[[16,16]],[11,16],[11,16],[11,16],[48,16],[[]],[[]],[48,16],[[],3],[[],3],[[],3],[[],3],[[],17],[[],17],0,0,0,0,[[48,48]],[[]],[[]],[48,48],[[]],[48],[9],[9],[[48,48],11],[9],[[48,48],10],[[48,14],15],[[48,14],15],[[]],[[],48],[50,48],[47,48],[[],9],[[]],[[48,48],10],[[48,48]],[[48,11]],[48,48],[48,11],[48,48],[48,11],[[48,48]],[[]],[[],26],[[],3],[[],3],[[],17],0,0,0,0,[[52,[68,[67]]]],[[]],[[]],[[],52],[9],[9],[9],[[52,14],15],[[]],[[],9],[[]],[[52,12],[[25,[69]]]],0,[[],3],[[],3],[[],17]],"p":[[3,"ArgMatches"],[4,"CompletionErr"],[4,"Result"],[4,"ConvertErr"],[4,"DemoErr"],[4,"RenderErr"],[3,"OrthogonalCamera"],[3,"PerspectiveCamera"],[15,"usize"],[15,"bool"],[15,"f32"],[3,"Ray"],[4,"Camera"],[3,"Formatter"],[6,"Result"],[3,"Transformation"],[3,"TypeId"],[3,"Command"],[3,"Cli"],[3,"Color"],[4,"HdrImageErr"],[4,"SceneErr"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"HdrImage"],[15,"u32"],[4,"Luminosity"],[15,"str"],[4,"ByteOrder"],[3,"Path"],[3,"Vec"],[6,"Result"],[3,"ImageTracer"],[15,"u64"],[3,"Rays"],[4,"Renderer"],[3,"UniformPigment"],[3,"ImagePigment"],[3,"CheckeredPigment"],[4,"Pigment"],[3,"DiffuseBRDF"],[3,"SpecularBRDF"],[4,"BRDF"],[3,"Material"],[3,"Normal"],[3,"Vector"],[3,"Vector2D"],[3,"Point"],[3,"Pcg"],[3,"World"],[3,"OnOffRenderer"],[3,"FlatRenderer"],[3,"PathTracer"],[3,"DummyRenderer"],[3,"SourceLocation"],[4,"Keywords"],[4,"Token"],[8,"Clone"],[8,"Read"],[3,"InputStream"],[3,"Var"],[3,"Scene"],[15,"char"],[3,"BTreeMap"],[8,"RayIntersection"],[3,"Box"],[3,"HitRecord"],[3,"Sphere"],[3,"Plane"],[3,"Matrix"],[8,"FireRay"],[13,"Orthogonal"],[13,"Perspective"],[13,"WriteCompletionFailure"],[13,"FloatParseFailure"],[13,"IoError"],[13,"IntParseFailure"],[13,"FloatParseFailure"],[13,"IoError"],[13,"OutOfBounds"],[13,"InvalidPixelsSize"],[13,"InvalidPfmFileFormat"],[13,"PfmFileReadFailure"],[13,"PfmFileWriteFailure"],[13,"PfmIntParseFailure"],[13,"PfmFloatParseFailure"],[13,"LdrFileWriteFailure"],[13,"UnsupportedLdrFileFormat"],[13,"IntParseFailure"],[13,"FloatParseFailure"],[13,"IoError"],[13,"SceneError"],[13,"UnexpectedMatch"],[13,"SceneFileReadFailure"],[13,"InvalidCharacter"],[13,"UnclosedString"],[13,"FloatParseFailure"],[13,"NotMatch"],[13,"PfmFileReadFailure"],[13,"UndefinedIdentifier"],[13,"InvalidCamera"],[13,"FloatValue"],[8,"Eval"],[8,"GetColor"],[8,"ScatterRay"],[13,"Diffuse"],[13,"Specular"],[13,"Uniform"],[13,"Image"],[13,"Checkered"],[8,"IsClose"],[8,"Solve"],[13,"OnOff"],[13,"Dummy"],[13,"PathTracer"],[13,"Flat"],[13,"Identifier"],[13,"Keyword"],[13,"LiteralNumber"],[13,"Stop"],[13,"String"],[13,"Symbol"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
